\chapter{What is literate programming?}
\mode*
@ \only<presentation>{\section{Introduction}}%
%
Let's start off with some thinking.

\ltnote{%
  We want to investigate how many know of or have heard of literate 
  programming.
  Or, think they know.
  This will simply give us some statistics.
}%
\begin{frame}
\begin{activity}\label{HeardOfLP}
  Have you ever heard of or do you know literate programming?
\end{activity}
\end{frame}

\ltnote{%
  We want to investigate what people think literate programming is.
  This will help us understand the correctness of the answers of 
  \cref{HeardOfLP}.

  Also consider the results by Székely discussed in Chapter 6 of 
  \cite{NecessaryConditionsOfLearning}.
  If they get to think a bit about what they think it is, they'll be more 
  likely to learn better.

  This also gives us the contrast pattern for the goals of literate 
  programming.
  They think of what it might mean, whereas when we give the quote and goals 
  below, we introduce contrast to their thoughts.
  Then they know what is focused.

  Finally, this will also help us understand how to improve this material in 
  the future.
}%
\begin{frame}
\begin{activity}\label{WhatDoesLPMean}
  What do you think it means?
\end{activity}
\end{frame}

Now that you have heard the term, you must learn what it means.
We'll see afterwards how you feel about it.
As Knuth says:
\begin{frame}
\ltnote{%
  While this quote doesn't contribute to learning in a variation theoretic 
  sense, it adds a sense of humor to the presentation.
  That might help in keeping the students engaged.
}%
\blockcquote{Knuth1984}{%
  I must confess that there may also be a bit of malice in my choice of a 
  title. During the 1970s I was coerced like everybody else into adopting the 
  ideas of structured programming, because I couldn’t bear to be found guilty 
  of writing unstructured programs. Now I have a chance to get even. By coining 
  the phrase \enquote{literate programming,} I am imposing a moral commitment 
  on everyone who hears the term; surely nobody wants to admit writing an 
  illiterate program.%
}
\end{frame}

\section{Motivation}

Let's start with a quote that summarizes Knuth's motivation for literate 
programming:
\begin{frame}
\blockcquote[p.~99, my emphasis]{Knuth1984}{%
  Let us change our traditional attitude to the construction of programs: 
  Instead of imagining that our main task is to instruct a computer what to do, 
  let us concentrate rather on
  \textbf{explaining to human beings what we want a computer to do}.

  \textelp{}

  Such an author, with thesaurus in hand, chooses the names of variables 
  carefully and explains what each variable means. He or she
  \textbf{strives for a program that is comprehensible because its concepts 
  have been introduced in an order that is best for human understanding},
  using a mixture of formal and informal methods that reinforce each other.
}
\end{frame}
\mode<all>{%
\NewDocumentCommand{\LPexplain}{}{%
  explaining to human beings what we want a computer to do%
}
\NewDocumentCommand{\LPorder}{}{%
  strives for a program that is comprehensible because its concepts have been 
  introduced in an order that is best for human understanding%
}
\NewDocumentCommand{\LPgoals}{}{%
  \begin{itemize}
    \item \textbf{\LPexplain}
    \item \textbf{\LPorder}
  \end{itemize}
}}%
\ltnote{%
  These are the two main aspects of literate programming that separates it from 
  other methodologies.
  This means that we want to introduce other methodologies and show variation 
  in these two aspects.
  This is what \cref{RelatedApproaches} is for.
}%
So we can summarize the goals of literate programming as follows:
\begin{itemize}
\item \LPexplain, and
\item \LPorder.
\end{itemize}

There are some more fun and interesting quotes in Knuth's paper.
The following are also worth mentioning:
\begin{frame}
\blockcquote{Knuth1984}{%
  I’ve stumbled across a method of composing programs that excites me
  very much. In fact, my enthusiasm is so great that I must warn the reader to 
  discount much of what I shall say as the ravings of a fanatic who thinks he 
  has just seen a great light.%
}
\end{frame}

But Knuth is convinced that this works well:
\blockcquote{Knuth1984}{%
  Because it seems to me that at last
  I’m able to write programs as they should be written.
  My programs are not only explained better than ever
  before; they also are better programs, because the new
  methodology encourages me to do a better job.%
}

\subsection{Famous literate programs}
%
\only<presentation>{%
  \begin{frame}
    \large
    Famous literate programs?
  \end{frame}
}%
The first program that comes to mind is of course
\ltnote{%
  It will probably be better for the motivation to hear about some famous 
  examples of literate programs---that they wouldn't know were literate 
  programs.
  This surprise effect might have slightly deterring effect on sleepiness.
}%
\begin{frame}%
\only<presentation>{\centering\large}%
\TeX\autocite[this is in fact the literate source code of the program and a 
published book]{TeXprogram}
and, based on that,
\LaTeX\footnote{\url{https://latex-project.org}}%
\end{frame}.
\TeX{} was, of course, among the first literate programs to be written.

\Citeauthor{ErrorsOfTeX} goes quite into the details of the development of 
\TeX{} in \citetitle{ErrorsOfTeX}\autocite{ErrorsOfTeX}.
This text might be of interest to many as it shows that everyone suffers from 
making mistakes and that it might take days (or nights) to debug errors for 
anyone---even for the Professor of the Art of Computer Programming\footnote{%
  That is Knuth's title at Stanford University.
}.

\begin{frame}
  On 8th January 2014, Matt Pharr, Greg Humphreys, and Pat Hanrahan were 
  awarded the 2013 Scientific and Technical Academy Award for Physically Based 
  Rendering\autocite[][award for an earlier edition]{PBR}.
  \begin{onlyenv}<article>
    See \cref{fig:pbr}.
    The motivation:
    \blockquote{%
      Physically based rendering has transformed computer graphics lighting by 
      more accurately simulating materials and lights, allowing digital artists 
      to focus on cinematography rather than the intricacies of rendering. 
      First published in 2004, Physically Based Rendering is both a textbook 
      and a complete source-code implementation that has provided a widely 
      adopted practical roadmap for most physically based shading and lighting 
      systems used in film production.
    }
  \end{onlyenv}

  \begin{figure}
    \begin{sidecaption}{%
      The book \citetitle{PBR} and its authors.
    }[fig:pbr]
    \begin{subfigure}{0.48\columnwidth}
      \includegraphics[width=\columnwidth]{figs/pbrcover.jpg}
      \caption{The cover of the book \citetitle{PBR}.}
    \end{subfigure}
    \begin{subfigure}{0.48\columnwidth}
      \includegraphics[width=\columnwidth]{figs/pbr-authors-academy.jpg}
      \caption{\Citeauthor{PBR} at the Academy Awards ceremony.}
    \end{subfigure}
    \end{sidecaption}
  \end{figure}
\end{frame}

Knuth said of this: \blockquote{This book has deservedly won an Academy Award. 
I believe it should also be nominated for a Pulitzer Prize.}
This book is a literate program.
%See \cref{fig:pbrlit} for an excerpt from the book.
%By the end of this text we'll be better equipped to read that text.
%
%\begin{frame}
%  \begin{figure}
%    \centering
%    \includegraphics[width=\columnwidth]{figs/pbr.png}
%    \caption{\label{fig:pbrlit}%
%      An excerpt from the book \citetitle{PBR} (online version).
%    }
%  \end{figure}
%\end{frame}


\input{related.tex}


\section{Literate programming}

To use literate programming we need some tooling.
There have been several tools developed for literate programming over time.
The original was Knuth's \web\autocite{Knuth1984}, which required the programs 
to be written in Pascal and the documentation in \TeX.
This was later generalized to \cweb\autocite{CWEB}, which allowed the programs 
to be written in C and the documentation in \TeX.

\ltnote{%
  We provide the tools early on, that way the reader can experiment as we go.
  This reduces the cognitive load of the reader who must keep more in their 
  memory until they can practice it.
}%
We'll use \noweb\autocite{Ramsey1994}, which is language agnostic and can thus 
be used with any programming language.
\begin{frame}
The tool can be found on its web page
\begin{quote}
\url{https://www.cs.tufts.edu/~nr/noweb/}
\end{quote}
and
GitHub repository
\begin{quote}
\url{https://github.com/nrnrnr/noweb}.
\end{quote}
\end{frame}
However, the easiest way is to install it using the package manager of your 
operating system.
For instance, on
\begin{frame}
Ubuntu and Debian, you can install it using the following command\footnote{%
  \noweb is already installed on KTH's Linux systems, both
  in the lab rooms and
  on the shell servers.
  So you don't need to do this yourself on any of those systems.
}
\begin{minted}{bash}
sudo apt install noweb
\end{minted}
On Mac, you install it using Homebrew:
\begin{minted}{bash}
brew install noweb
\end{minted}
On Windows, it's easiest to use WSL, reducing the problem to that of Ubuntu 
or similar.
\end{frame}

Let's start with a small example.

\begin{example}[A literate program]\label{ALitProg}
  \input{fib.tex}
\end{example}

Let's study \cref{ALitProg} by returning to the goals of literate 
programming\footnote{%
 As a reminder, the goals are:
 \LPgoals
}.
Although \cref{ALitProg} is a toy example, we see hints of why it can fulfil 
the goals of literate programming.
(We'll see bigger examples later.)
We can see that it seems to target the reader in explaining the program.
We can also see that it seems to not be written in the order required by the 
computer.

\begin{frame}[fragile,allowframebreaks]
\begin{onlyenv}<presentation>
  \input{fib.tex}
\end{onlyenv}
\ltnote{%
  \Cref{ReadFooBar} serves two purposes.
  First, it will let the students try to figure out of the \noweb{} (and 
  \web-based languages) syntax works.
  Second, we'll get data on how well people can read the literate programming 
  syntax without being taught how it works.
}%
\begin{activity}\label{ReadFooBar}
  What you expect this program ([[fib.py]]) to output?
\end{activity}
\end{frame}

\begin{onlyenv}<presentation>
\begin{frame}[fragile]
  \begin{columns}
    \begin{column}{0.48\columnwidth}
      \input{fib.tex}
    \end{column}
    \begin{column}{0.48\columnwidth}
      \LPgoals

      \begin{remark}
        \begin{itemize}
          \item Note the order of exposition.
        \end{itemize}
      \end{remark}
    \end{column}
  \end{columns}
\end{frame}
\end{onlyenv}

\Cref{ALitProg} is the typeset version of a small example literate program.
It's not what I typed, but how it was intended to be read---we have 
\emph{weaved} it.

\begin{frame}[fragile]
\begin{example}[Literate source]\label{LiterateSource}
  We write the following literate source in [[fib.nw]] to get the typeset 
  program in \cref{ALitProg}:
  \only<article>{\inputminted[firstline=2,firstnumber=1]{text}{fib.nw}}
  \only<presentation>{%
    \inputminted[
      firstline=2,firstnumber=1,lastline=12
    ]{text}{fib.nw}%
  }
\end{example}
\end{frame}

\ltnote{%
  In \cref{LiterateSource} and the following comment, we show how the 
  literate approach fulfils both the goals of literate programming.
  And not only ephemerally, as with some of the other methodologies.

  By now we've almost covered LO~\ref{LOlitprog}.
  We've covered the contrasting pattern.
  We now need to generalize.
  We do this by keeping literate programming invariant and let the program 
  examples vary.
}%
Note the order of the exposition in \cref{SmallLiterateExample}.
We describe the second step before we describe the first step.

\begin{frame}
\begin{figure}
\begin{fullwidth}
\begin{subfigure}{0.48\columnwidth}
  \includegraphics[width=\columnwidth]{figs/web.pdf}
  \caption{\label{web}Traditional \web-based workflow.}
\end{subfigure}
\begin{subfigure}{0.48\columnwidth}
  \includegraphics[width=\columnwidth]{figs/noweb.pdf}
  \caption{\label{noweb}\noweb-based workflow.}
\end{subfigure}
\end{fullwidth}
\caption{Traditional \web{} vs \noweb{} workflow.}
\end{figure}
\end{frame}

\begin{frame}[fragile]
\ltnote{%
  \Cref{fib.py} starts our work on LO~\ref{LOnoweb}.
}%
\begin{onlyenv}<presentation>
  \vspace*{-1em}
  \begin{columns}[t]
    \begin{column}{0.48\columnwidth}
      \inputminted[
        firstline=2,firstnumber=1,lastline=8,fontsize=\small,
        breaklines
      ]{text}{fib.nw}
    \end{column}
    \begin{column}{0.48\columnwidth}
      \inputminted[
        firstline=9,firstnumber=9,fontsize=\small
      ]{text}{fib.nw}
    \end{column}
  \end{columns}
\end{onlyenv}
\begin{example}[Tangling]\label{fib.py}
We can extract the computer readable code by tangling:
\begin{minted}{bash}
notangle -Rfib.py fib.nw > fib.py
\end{minted}
This yields the following Python code:
\inputminted{python}{fib.py}
\end{example}
\end{frame}

Despite being described in the \enquote{wrong} (from the computer's 
perspective) order, the code is extracted in the right order in \cref{fib.py}.

\ltnote{%
  Here we introduce contrast in the root-ness aspect of the web source.
  All the examples following will generalize this.
}%
We note that the [[-Rfib.py]] option to [[notangle]] is used to specify the 
name of the root chunk---the root of the tree that we want to extract.

\begin{example}
  We could use any of the chunk names in the source code.
  For instance,
  \begin{minted}{bash}
notangle -R"module functions" fib.nw
  \end{minted}
  would yield
  \begin{pycode}
didactic_shell(["notangle", "-Rmodule functions", "fib.nw"], lang="python")
  \end{pycode}
  And
  \begin{minted}{bash}
notangle -R"test code" fib.nw
  \end{minted}
  would yield
  \begin{pycode}
didactic_shell(["notangle", "-Rtest code", "fib.nw"], lang="python")
  \end{pycode}
\end{example}

More details can be found in the [[notangle]] manual page.
Run the following line in the terminal to read it:
\begin{frame}
\begin{minted}{bash}
man notangle
\end{minted}
\end{frame}

Finally, another useful command is [[noroots]].
This will list all the roots in the source code, \ie chunks that are not used 
in any other chunk.
This can help us to find typos in the chunk names.

\begin{frame}[fragile]
\begin{example}[Listing roots]
  The following command line will give us a list of all the roots in the 
  [[fib.nw]] source code.
  \begin{minted}{bash}
noroots fib.nw
  \end{minted}
  The output will look like this:
  \begin{pycode}
didactic_shell(["noroots", "fib.nw"])
  \end{pycode}
\end{example}
\end{frame}

\begin{frame}[fragile]
\begin{example}[Listing more roots]
  If we look at [[introsort.nw]] (\cref{introsort}), we can see that it has 
  several roots.
  \begin{minted}{bash}
noroots introsort.nw
  \end{minted}
  The output will look like this:
  \begin{pycode}
didactic_shell(["noroots", "introsort.nw"])
  \end{pycode}
\end{example}
\end{frame}

\subsection{Weaving}

Now, the literate source of \cref{LiterateSource} is not of much use to the 
human reader either.
And it's of no use to \LaTeX{}.
During the weaving process we get a \LaTeX{} file that can be compiled into a 
document.

\begin{frame}[fragile]
\begin{example}[Weaving]\label{WeavingFib}
We can extract the documentation by weaving:
\begin{minted}{bash}
noweave -n -latex fib.nw > fib.tex
\end{minted}
This yields the following \LaTeX{} code, which, when compiled into a document, 
looks exactly like \cref{ALitProg}.
(Don't worry that you can't read this \LaTeX{} code, it's meant to be read only 
by \TeX{}.)
\inputminted{latex}{fib.tex}
\begin{onlyenv}<article>
\end{onlyenv}
\end{example}
\end{frame}

\begin{frame}<presentation>
\input{fib.tex}
\end{frame}

When we use literate programming, there are generally three languages that 
interact:
\begin{enumerate}
\item The \emph{code} language, which is the language the computer understands 
(\eg Python, C, C++ or Java).
\item The \emph{documentation} language, which is the language that the 
documentation is written in (\eg \LaTeX, \TeX{} or Markdown, not English).
\item The \emph{web} language, which is the language that marks what is code 
and what is documentation (\eg \web{} or \noweb{}).
\end{enumerate}

The web language is used to extract the code and the documentation from the 
source into separate files.
(See \cref{web} for an illustration.)
We extract the code by \emph{tangling} the literate source, using the tool 
[[ctangle]] (\cweb) or [[notangle]] (\noweb, \cref{noweb,LiterateSource}).
This results in a file with the code as readable by the computer (compiler or 
interpreter).
We extract the documentation (and code) by \emph{weaving} the literate source, 
using the tool [[cweave]] (\cweb) or [[noweave]] (\noweb, \cref{WeavingFib}).
This results in \TeX-code that can be compiled into a document readable by 
humans (\cref{ALitProg}).

Traditionally, the documentation is written in \TeX{}.
However, \noweb{}, for instance, supports other formats as well, such as HTML.
Markdown can also be used, even without weaving.
However, adding support for Markdown in the weaving process is possible with 
\noweb, and it would make the code slightly nicer to write.

\subsection{Using \noweb}

As mentioned, \noweb, is language agnostic.
It allows the programmer to write the programs in any language and the 
documentation in any format.
This makes it simpler, hence \enquote{simplified} in the title of the paper by 
\textcite{Ramsey1994}.
This comes with both advantages and disadvantages.
The most obvious disadvantage is that we can't get prettyprinting (syntax 
highlighting among other things) in any straight-forward way; the system can't 
know what language is being used.
We give two advantages:
\begin{frame}[fragile]
\begin{onlyenv}<presentation>
\begin{onlyenv}<1>
  \begin{figure}[H]
    \begin{fullwidth}
      \begin{subfigure}{0.48\columnwidth}
        \includegraphics[width=\columnwidth]{figs/web.pdf}
        \caption{\label{web}Traditional \web-based workflow.}
      \end{subfigure}
      \begin{subfigure}{0.48\columnwidth}
        \includegraphics[width=\columnwidth]{figs/noweb.pdf}
        \caption{\label{noweb}\noweb-based workflow.}
      \end{subfigure}
    \end{fullwidth}
  \end{figure}
\end{onlyenv}
\end{onlyenv}

\begin{enumerate}
  \item<+> We can mix languages: for instance, we can write the Makefile in the 
  same file as the C program; that way we can include necessary building 
  instructions, for example, when we depend on certain libraries.
  \item<+> We can also write the documentation in any format, for instance in 
  Markdown, \LaTeX, or HTML.
  \noweb{} supports \LaTeX{} and HTML out of the box, but it's easy to extend 
  to make slight improvements for formats such as Markdown.
\end{enumerate}
\end{frame}

An advantage of using \LaTeX{} (or \TeX) for the documentation, over formats 
such as Markdown, is that it's a Turing complete language.
This allows us to do anything we want with the documentation to improve the 
exposition for the reader.
For instance, in my workflow (\cref{myflow}) I use Python\TeX{} 
(\texttt{pythontex}) to run the program and include outputs in the 
documentation.

\begin{frame}
\begin{figure}
\begin{sidecaption}
  {My workflow with \texttt{beamerarticle}, \texttt{beamer} and Python\TeX.}
  [myflow]
  \raggedleft
  \includegraphics[width=0.8\columnwidth]{figs/pythontex.pdf}
\end{sidecaption}
\end{figure}
\end{frame}

\begin{frame}[fragile]
\begin{example}[Python\TeX{}]
Since the code
\only<article>{in \cref{fib.py}}%
\only<presentation>{above}
([[fib.py]])
is valid Python.
We can do this:
\begin{minted}{latex}
\begin{pyblock}
import subprocess
print(r"\begin{verbatim}")
proc = subprocess.run(["python3", "fib.py"],
                      capture_output=True)
print(proc.stdout.decode("utf-8"))
print(r"\end{verbatim}")
\end{pyblock}
\end{minted}
The results looks like this:
\begin{pycode}
import subprocess
print(r"\begin{verbatim}")
proc = subprocess.run(["python3", "fib.py"],
                      capture_output=True)
print(proc.stdout.decode("utf-8"))
print(r"\end{verbatim}")
\end{pycode}
\end{example}
\end{frame}

This is advantageous because it helps keep example output in sync with the 
code.
When we hardcode example outputs, we must remember to update them when we 
change the code.
As an example, the documentation of the [[ladok3]] Python 
package\autocite{ladok3} contains a lot of example outputs: over 1500 pages!

\begin{frame}
\begin{example}
You can find the source code for this
\only<presentation>{slides (and text)}%
\only<article>{text (and slides)}
on GitHub:
\begin{center}
\url{https://github.com/dbosk/literate-programming/tree/master/src}.
\end{center}
\end{example}
\end{frame}

\subsection{Example: a script for merging Canvas rooms}

\mode<all>{\input{merge.tex}}

All in all, the script [[merge.sh]] looks like this after we've tangled it:
\begin{frame}[fragile,allowframebreaks]
\only<presentation>{\inputminted[fontsize=\footnotesize]{bash}{merge.sh}}
\only<article>{\inputminted{bash}{merge.sh}}
\end{frame}

\subsection{Summary}

\ltnote{%
  This question is purely phenomenographic.
  We want to know how they perceive literate programming, what aspects they 
  distinguish now.
}%
\begin{frame}
\begin{activity}
  How would you summarize literate programming for someone who don't know what 
  it is?
\end{activity}
\end{frame}

\subsection{Other tools}

We note that Haskell supports literate programming out of the box.
This is done by using a file with the extension [[.lhs]] instead of [[.hs]].
In a [[.lhs]] file, the code is written in code blocks:
\begin{frame}[fragile]
\begin{minted}{text}
Let's create a small Haskell program.
> main = putStrLn "Hello, world!"
\end{minted}
or, equivalently
\begin{minted}{text}
Let's create a small Haskell program.
\begin{code}
main = putStrLn "Hello, world!"
\end{code}
\end{minted}
\end{frame}

We note that the code blocks of literate Haskell doesn't allow for the same web 
of code blocks as \web{}-based literate programming.
This is actually fine due to the nature of Haskell, where the order of 
definitions doesn't matter.
This means that we can still, despite this, write the code in the order we want 
to explain it---adapted for human understanding, not the computer's.

Another related tool, Agda, allows for the same type of literate 
programming.
Agda uses the extension [[.lagda]].
Agda is a language for formal reasoning and proof development, developed by Ulf 
Norell and Catarina Coquand at Chalmers University of Technology.
(We note that several people from Chalmers also contributed to the development 
of Haskell.)

\begin{frame}<presentation>
\begin{center}
  \Huge
  Agda
\end{center}
\end{frame}

As a final note, GNU Make has built in rules for literate programming using 
Knuth's \cweb (what you see in \cref{web}), but not for \noweb.

\begin{frame}<presentation>
\begin{center}
  \Huge
  GNU Make
\end{center}
\end{frame}


\title{%
  What is literate programming?
}
\author{%
  Daniel Bosk
}
\institute{%
  KTH EECS
}

\mode*

@

\begin{frame}
  \maketitle
\end{frame}

\begin{abstract}
  \input{abstract.tex}
\end{abstract}

\clearpage

\begin{frame}
  \only<presentation>{\tableofcontents[hideallsubsections]}
  \only<article>{\tableofcontents}
\end{frame}

\clearpage

\section{Introduction}

Let's start of with some thinking.

\ltnote{%
  We want to investigate how many know of or have heard of literate 
  programming.
  Or, think they know.
  This will simply give us some statistics.
}%
\begin{frame}
\begin{activity}\label{HeardOfLP}
  Have you ever heard of or do you know literate programming?
\end{activity}
\end{frame}

\ltnote{%
  We want to investigate what people think literate programming is.
  This will help us understand the correctness of the answers of 
  \cref{HeardOfLP}.

  Also consider the results by Székely discussed in Chapter 6 of 
  \cite{NecessaryConditionsOfLearning}.
  If they get to think a bit about what they think it is, they'll be more 
  likely to learn better.

  This also gives us the contrast pattern for the goals of literate 
  programming.
  They think of what it might mean, whereas when we give the quote and goals 
  below, we introduce contrast to their thoughts.
  Then they know what is focused.

  Finally, this will also help us understand how to improve this material in 
  the future.
}%
\begin{frame}
\begin{activity}\label{WhatDoesLPMean}
  What do you think it means?
\end{activity}
\end{frame}

Now that you have heard the term, you must learn what it means.
We'll see afterwards how you feel about it.
As Knuth says:
\begin{frame}
\ltnote{%
  While this quote doesn't contribute to learning in a variation theoretic 
  sense, it adds a sense of humor to the presentation.
  That might help in keeping the students engaged.
}%
\blockcquote{Knuth1984}{%
  I must confess that there may also be a bit of malice in my choice of a 
  title. During the 1970s I was coerced like everybody else into adopting the 
  ideas of structured programming, because I couldn’t bear to be found guilty 
  of writing unstructured programs. Now I have a chance to get even. By coining 
  the phrase \enquote{literate programming,} I am imposing a moral commitment 
  on everyone who hears the term; surely nobody wants to admit writing an 
  illiterate program.%
}
\end{frame}

\subsection{Motivation}

Let's start with a quote that summarizes Knuth's motivation for literate 
programming:
\begin{frame}
\blockcquote[p.~99, my emphasis]{Knuth1984}{%
  Let us change our traditional attitude to the construction of programs: 
  Instead of imagining that our main task is to instruct a computer what to do, 
  let us concentrate rather on
  \textbf{explaining to human beings what we want a computer to do}.

  \textelp{}

  Such an author, with thesaurus in hand, chooses the names of variables 
  carefully and explains what each variable means. He or she
  \textbf{strives for a program that is comprehensible because its concepts 
  have been introduced in an order that is best for human understanding},
  using a mixture of formal and informal methods that reinforce each other.
}
\end{frame}
\mode<all>{%
\NewDocumentCommand{\LPexplain}{}{%
  explaining to human beings what we want a computer to do%
}
\NewDocumentCommand{\LPorder}{}{%
  strives for a program that is comprehensible because its concepts have been 
  introduced in an order that is best for human understanding%
}
\NewDocumentCommand{\LPgoals}{}{%
  \begin{itemize}
    \item \textbf{\LPexplain}
    \item \textbf{\LPorder}
  \end{itemize}
}}%
\ltnote{%
  These are the two main aspects of literate programming that separates it from 
  other methodologies.
  This means that we want to introduce other methodologies and show variation 
  in these two aspects.
}%
So we can summarize the goals of literate programming as follows:
\begin{itemize}
\item \LPexplain, and
\item \LPorder.
\end{itemize}

There are some more fun and interesting quotes in Knuth's paper.
The following are also worth mentioning:
\begin{frame}
\blockcquote{Knuth1984}{%
  I’ve stumbled across a method of composing programs that excites me
  very much. In fact, my enthusiasm is so great that I must warn the reader to 
  discount much of what I shall say as the ravings of a fanatic who thinks he 
  has just seen a great light.%
}
\end{frame}

But Knuth is convinced that this works well:
\blockcquote{Knuth1984}{%
  Because it seems to me that at last
  I’m able to write programs as they should be written.
  My programs are not only explained better than ever
  before; they also are better programs, because the new
  methodology encourages me to do a better job.%
}

\subsection{Related approaches}

Let's start by thinking of systems that we know that might fulfil some of these 
goals.
\ltnote{%
  The purpose of \cref{NameOtherRelated} is to get them to think about systems 
  they already know that might come close to this.
  From a variation theoretic perspective, they now think about why or why not 
  some things fulfil these goals.
  This means that they have already gotten started on the contrast pattern.
  Compare with the Japanese classrooms discussed in Chapter 6 of 
  \cite{NecessaryConditionsOfLearning}.

  However, we don't ask them to write anything at this point.
  To name them, they still have to think about this.
  Then we'll go through a few in detail.
  Then we can ask them for remaining ones.
}%
\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}\label{NameOtherRelated}
Do you know of any tools/systems/languages that lets you do something like 
this?
Name them.
\end{activity}
\end{frame}

\paragraph{Notebooks}

Probably the first that comes to mind is the Jupyter notebook,
see \cref{fig:jupyter}.

\begin{frame}
\ltnote{%
  \Cref{AnalyseNotebooks} allows the students to compare notebooks to the goals 
  of literate programming.
  This is the start of a generalization pattern:
  we keep the goals invariant and vary the systems/tool/approach.
  (We did get the contrast above, in \cref{WhatDoesLPMean}.)
}%
\begin{activity}\label{AnalyseNotebooks}
How well do you know the concept of notebooks\footnote{%
  Be it Jupyter, Google Colab, or any other similar system.
}?
\end{activity}
\end{frame}

Notebooks consists of cells, which can be of different types.
Some might be text and others are code.
The code cells can be executed and the output is shown below the cell, in the 
document.
This way the author can explain the code in the text cells and then show the 
code in the code cells.

The code cells can be executed in any order, which is both a strength and a 
weakness.
It's a strength because you can experiment and try things out.
It's a weakness because you can't really successively build the program.
However, if they weren't independet, we would get dependencies and the cells 
would have to be executed in the right order (spaghetti code with global 
variables).

\begin{frame}
\begin{figure}
  \includegraphics[width=\columnwidth]{figs/jupyter-notebook.png}
  \caption{\label{fig:jupyter}%
    The Jupyter notebook.
  }
\end{figure}
\end{frame}

\begin{frame}
\begin{remark}
  The concept of notebooks seems to originate with 
  Mathematica\autocite{Wolfram1988}.
  Wolfram started the work in 1986, two years after Knuth published 
  \citetitle{Knuth1984}.
  \only<article>{%
    It's unclear from the material that I've reviewed so far, if Wolfram was 
    inspired by Knuth's work.
    It might be independent due Wolfram being a physicist and Mathematica's 
    focus on mathematics.
    The notebook concept is basically just an interactive (and computational) 
    extension of the traditional way of using mathematics in physics (papers 
    and notebooks).%
  }
\end{remark}
\end{frame}

\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
How well do you think notebooks fulfil the goals of literate programming?
\end{activity}
\end{frame}

It for sure fulfils the first goal, \enquote{\LPexplain}.
However, it doesn't necessarily fulfil the second goal, \enquote{\LPorder}.
We can't really have any order we want, we must follow the order of execution 
in the cells---which is ordered for the computer, not the human\footnote{%
  Although, these might align at times, at other times they don't.
}.

\begin{frame}<presentation>
\begin{block}{Notebooks}
  \begin{itemize}
    \item[\(+\)] {\color{green!75!black}\LPexplain}
    \item[\(-\)] {\color{red}\LPorder}
  \end{itemize}
\end{block}

\begin{remark}
  Code cells independent, code in order of the computer.
\end{remark}
\end{frame}

\paragraph{Docstrings}

Docstrings is another concept that has been argued is literate programming.
The reasoning is that we generate documentation from the code.

\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
How well do you think docstrings fulfil the goals of literate programming?
\end{activity}
\end{frame}

The docstrings aim at explaining how to use a particular function or class.
It explains what the inputs and outputs are, but not how those are achieved.
The purpose of them is to describe how to use these constructs as black boxes, 
without having to know how they do it.
Consider the documentation for the function [[sorted]] in Python:
\begin{pycode}
print(r"\begin{verbatim}")
help(sorted)
print(r"\end{verbatim}")
\end{pycode}
Nothing in the documentation explains how the sorting is done, no details of 
the underlying sorting algorithm(s).

We could of course generate an explanation for a piece of code by extracting 
the docstrings of the functions being called.
However, that only explains what the code does, same as reading the code 
itself.
It doesn't explain the programmer's intent when writing the code.

\begin{frame}<presentation>
\begin{block}{Docstrings}
  \begin{itemize}
    \item[\(-\)] {\color{red}\LPexplain}
    \item[\(-\)] {\color{red}\LPorder}
  \end{itemize}
\end{block}

\begin{remark}
  Explains what, not why.
\end{remark}
\end{frame}

\paragraph{Rubber duck debugging}

Another related concept is rubber duck debugging.

\begin{frame}
\begin{activity}
How well do you know rubber duck debugging?
\end{activity}
\end{frame}

\begin{frame}<presentation>
\begin{block}{Rubber duck debugging}
  \begin{itemize}
    \item Explain the code to a rubber duck.
    \item Helps understanding the code to find the bug.
  \end{itemize}
\end{block}
\end{frame}

The idea of rubber duck debugging is that you explain the code for a rubber 
duck.
In doing so, you get a better understanding of the code, which helps you to 
find the bug.

\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
How well do you think rubber duck debugging fulfils the goals of literate 
programming?
\end{activity}
\end{frame}

\begin{frame}<presentation>
\begin{uncoverenv}<1>
\begin{block}{Rubber duck debugging}
  \begin{itemize}
    \item[\(+\)] {\color{green!75!black}\LPexplain}
    \item[\(+\)] {\color{green!75!black}\LPorder}
  \end{itemize}
\end{block}
\end{uncoverenv}

\begin{onlyenv}<2>
\begin{remark}
  But none is documented, so it's lost to others.
\end{remark}

\begin{block}{Rubber duck debugging, end product}
  \begin{itemize}
    \item[\(-\)] {\color{red}\LPexplain}
    \item[\(-\)] {\color{red}\LPorder}
  \end{itemize}
\end{block}
\end{onlyenv}
\end{frame}

This for sure comes close to the goals of literate programming.
However, none is documented, so it's lost to others\footnote{%
  And your future self.
}.
Also, the programmer is not forced to explain things unless there is a bug to 
find.

\paragraph{Pair programming}

Pair programming is similar to rubber duck debugging, but with another human 
instead of a rubber duck and you do this while developing---not just when 
debugging.

\begin{frame}<presentation>
\begin{onlyenv}<1-2>
\begin{block}{Pair programming}
  Pair programming is sort of the same, but with a fellow human instead of a 
  rubber duck.
\end{block}
\end{onlyenv}

\begin{uncoverenv}<2>
\begin{block}{Pair programming}
  \begin{itemize}
    \item[\(+\)] {\color{green!75!black}\LPexplain}
    \item[\(\approx\)] {\color{orange}\LPorder}
  \end{itemize}
\end{block}
\end{uncoverenv}

\begin{onlyenv}<2>
\begin{remark}
  They have to write the code in the order the computer understands it.
\end{remark}
\end{onlyenv}

\begin{onlyenv}<3>
\begin{remark}
  But this is not necessarily documented, so it's lost to others.
\end{remark}

\begin{block}{Pair programming, end product}
  \begin{itemize}
    \item[\(-\)] {\color{red}\LPexplain}
    \item[\(-\)] {\color{red}\LPorder}
  \end{itemize}
\end{block}
\end{onlyenv}
\end{frame}

The two programmers working together explains the thoughts of the design and 
code to each other as they progress the development.
To some extent, they can do this in the order needed.
However, in the end, the code must be written in the order the computer 
understands it.

But in the end, nothing from this process is necessarily stored.
So it's again lost to others, including the programmers' future selves.

\paragraph{Documentation in version management}

We can also document meaning in the version management system, as commit 
messages and notes in issues and pull requests.

\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
How well do you think documentation in version management systems fulfil the 
goals of literate programming?
\end{activity}
\end{frame}

The documentation of \emph{changes} in the version management system sure 
contains good explanation of why the changes are needed.
For instance, [[git blame]] and similar commands, allows us to see a motivation 
for each line of code.

However, this does not necessarily give us the order needed to understand the 
program.
But rather as the commit diff was generated, together with one block of 
explanation.
So the quality depends on the sizes of the commits.

Another problem is that the commits for the first version don't necessarily 
contain the same quality of explanation as the later commits.
For those we are probably left with only the comments in the code.
And in this case, the order of exposition is adapted for the computer rather 
than humans.

\begin{frame}<presentation>
\begin{block}{Documentation in version management}
  \begin{itemize}
    \item[\(\approx\)] {\color{orange}\LPexplain}
    \item[\(\approx\)] {\color{orange}\LPorder}
  \end{itemize}
\end{block}

\begin{remark}
  \begin{itemize}
    \item Documents changes mostly, not first version.
    \item Exposition in diffs.
  \end{itemize}
\end{remark}
\end{frame}

\paragraph{Pseudocode}

The last one that we'll cover is pseudocode.

\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
How well do you think pseudocode fulfils the goals of literate programming?
\end{activity}
\end{frame}

Pseudocode actually comes quite close.
It's a way to explain the code to humans, and it's not necessarily tied to the 
order of execution.
We can vary the level of detail and the order of exposition to fit the human 
understanding.
As something usually used in the design process, it helps with the 
understanding of the overall design.
However, it's not necessarily integrated with the code.
And in the worst case, it's thrown away once there is an implementation.

\begin{frame}<presentation>
\begin{uncoverenv}<1>
\begin{block}{Pseudocode}
  \begin{itemize}
    \item[\(+\)] {\color{green!75!black}\LPexplain}
    \item[\(+\)] {\color{green!75!black}\LPorder}
  \end{itemize}
\end{block}
\end{uncoverenv}

\begin{onlyenv}<2>
\begin{remark}
  \begin{itemize}
    \item But this is not necessarily kept in the documentation.
    \item It's also not necessarily integrated with the code.
  \end{itemize}
\end{remark}

\begin{block}{Pseudocode, end product}
  \begin{itemize}
    \item[\(\approx\)] {\color{orange}\LPexplain}
    \item[\(\approx\)] {\color{orange}\LPorder}
  \end{itemize}
\end{block}
\end{onlyenv}
\end{frame}

%\paragraph{Testing}

\paragraph{Others}

This covered only some of the related concepts.

\ltnote{%
  We asked them in the beginning to name some systems that they think are 
  related.
  Some of their answers were probably covered by the examples above.
  In either case, they did their own analysis above, an analysis that might 
  have been complemented by the examples we gave.
  Now we give them the chance to provide us with the complemented analyses from 
  before, for the systems that we didn't cover.
}%
\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
Do you know of any other tools/systems/languages/techniques that let you do 
something like this?
Name them and discuss how well they fulfil the goals.
\end{activity}
\end{frame}



\section{Literate programming}

Let's start with a small example.

\begin{example}[A literate program]\label{ALitProg}
  \input{foo.tex}
\end{example}

\Cref{ALitProg} is the typeset version of a small example literate program.
It's not what I typed, but how it was intended to be read.

\begin{frame}[fragile]
\begin{onlyenv}<presentation>
  \input{foo.tex}
\end{onlyenv}
\ltnote{%
  \Cref{ReadFooBar} serves two purposes.
  First, it will let the students try to figure out of the \noweb{} (and 
  \web-based languages) syntax works.
  Second, we'll get data on how well people can read the literate programming 
  syntax without being taught how it works.
}%
\begin{activity}\label{ReadFooBar}
  Write the code that you think this program ([[foo.bar]]) will execute.
\end{activity}
\end{frame}

\begin{onlyenv}<presentation>
\begin{frame}[fragile]
  \begin{columns}
    \begin{column}{0.48\columnwidth}
      \input{foo.tex}
    \end{column}
    \begin{column}{0.48\columnwidth}
      \LPgoals

      \begin{remark}
        \begin{itemize}
          \item Note the order of exposition.
        \end{itemize}
      \end{remark}
    \end{column}
  \end{columns}
\end{frame}
\end{onlyenv}

\begin{frame}[fragile]
\begin{example}[Literate source]\label{SmallLiterateExample}
  We write the following literate source in [[foo.nw]].
  \only<article>{\inputminted[firstline=2,firstnumber=1]{text}{foo.nw}}
  \only<presentation>{\inputminted[
    firstline=2,firstnumber=1,lastline=12
  ]{text}{foo.nw}}
\end{example}
\end{frame}

\ltnote{%
  In \cref{SmallLiterateExample} and the following comment, we show how the 
  literate approach fulfils both the goals of literate programming.
  And not only ephemerally, as with some of the other methodologies.

  By now we've almost covered LO~\ref{LOlitprog}.
  We've covered the contrasting pattern.
  We now need to generalize.
  We do this by keeping literate programming invariant and let the program 
  examples vary.
}%
Note the order of the exposition in \cref{SmallLiterateExample}.
We describe the second step before we describe the first step.

\begin{frame}
\begin{figure}
\begin{fullwidth}
\begin{subfigure}{0.48\columnwidth}
  \includegraphics[width=\columnwidth]{figs/web.pdf}
  \caption{\label{web}Traditional \web-based workflow.}
\end{subfigure}
\begin{subfigure}{0.48\columnwidth}
  \includegraphics[width=\columnwidth]{figs/noweb.pdf}
  \caption{\label{noweb}\noweb-based workflow.}
\end{subfigure}
\end{fullwidth}
\caption{Traditional \web{} vs \noweb{} workflow.}
\end{figure}
\end{frame}

\begin{frame}[fragile]
\ltnote{%
  \Cref{foo.bar} starts our work on LO~\ref{LOnoweb}.
}%
\begin{onlyenv}<presentation>
  \vspace*{-1em}
  \begin{columns}[t]
    \begin{column}{0.48\columnwidth}
      \inputminted[
        firstline=2,firstnumber=1,lastline=8,fontsize=\footnotesize,
        breaklines
      ]{text}{foo.nw}
    \end{column}
    \begin{column}{0.48\columnwidth}
      \inputminted[
        firstline=9,firstnumber=9,fontsize=\footnotesize
      ]{text}{foo.nw}
    \end{column}
  \end{columns}
\end{onlyenv}
\begin{example}[Tangling]\label{foo.bar}
We can extract the computer readable code by tangling:
[[notangle -Rfoo.bar foo.nw > foo.bar]].
This yields:
\inputminted{text}{foo.bar}
\end{example}
\end{frame}

Despite being described in the \enquote{wrong} (from the computer's 
perspective) order, the code is extracted in the right order in \cref{foo.bar}.

\begin{frame}[fragile]
\begin{example}[Weaving]
We can extract the documentation by weaving:
[[noweave -n -latex foo.nw > foo.tex]].
This yields:
\inputminted{latex}{foo.tex}
\begin{onlyenv}<article>
Compiled into a document, it looks like this:
\input{foo.tex}
\end{onlyenv}
\end{example}
\end{frame}

\begin{frame}<presentation>
\input{foo.tex}
\end{frame}

When we use literate programming, there are generally three languages that 
interact:
\begin{enumerate}
\item The \emph{code} language, which is the language the computer understands 
(\eg Python, C or C++).
\item The \emph{documentation} language, which is the language that the 
documentation is written in (\eg \LaTeX, \TeX{} or Markdown, not English).
\item The \emph{web} language, which is the language that marks what is code 
and what is documentation (\eg \web{} or \noweb{}).
\end{enumerate}

The web language is used to extract the code and the documentation from the 
source into separate files.
(See \cref{web} for an illustration.)
We extract the code by \emph{tangling} the literate source, using the tool 
[[ctangle]] (\cweb) or [[notangle]] (\noweb, \cref{noweb}).
This results in a file with the code as readable by the computer (compiler or 
interpreter)
We extract the documentation (and code) by \emph{weaving} the literate source, 
using the tool [[cweave]] (\cweb) or [[noweave]] (\noweb).
This results in \TeX-code that can be compiled into a document readable by 
humans.

Traditionally, the documentation is written in \TeX{}.
However, \noweb{}, for instance, supports other formats as well, such as HTML.
Markdown can also be used, even without weaving.
However, adding support for Markdown in the weaving process is possible with 
\noweb, and it would make the code slightly nicer to write.

\subsection{Using \noweb}

To use literate programming we need some tooling.
We'll use \noweb\autocite{Ramsey1994}, we'll get back to in shortly.

There has been several tools developed for literate programming over time.
The original was Knuth's \web\autocite{Knuth1984}, which required the programs 
to be written in Pascal and the documentation in \TeX.
This was later generalized to \cweb\autocite{CWEB}, which allowed the programs 
to be written in C and the documentation in \TeX.

\noweb, on the other hand, is language agnostic.
It allows the programmer to write the programs in any language and the 
documentation in any format.
This makes it simpler, hence \enquote{simplified} in the title of the paper by 
\textcite{Ramsey1994}.
This comes with both advantages and disadvantages.
The most obvious disadvantage is that we can't get prettyprinting (syntax 
highlighting) in any straight-forward way; the system can't know what language 
is being used.
Some advantages are that
\begin{frame}[fragile]
\begin{onlyenv}<presentation>
\begin{onlyenv}<1>
  \begin{figure}[H]
    \begin{fullwidth}
      \begin{subfigure}{0.48\columnwidth}
        \includegraphics[width=\columnwidth]{figs/web.pdf}
        \caption{\label{web}Traditional \web-based workflow.}
      \end{subfigure}
      \begin{subfigure}{0.48\columnwidth}
        \includegraphics[width=\columnwidth]{figs/noweb.pdf}
        \caption{\label{noweb}\noweb-based workflow.}
      \end{subfigure}
    \end{fullwidth}
  \end{figure}
\end{onlyenv}
\end{onlyenv}

\begin{enumerate}
  \item<+> we can mix languages: for instance, we can write the Makefile in the 
  same file as the C program; that way we can include necessary building 
  instructions, for example, when we depend on certain libraries.
  \item<+> we can also write the documentation in any format, for instance in 
  Markdown, \LaTeX, or HTML.
  \noweb{} supports \LaTeX{} and HTML out of the box, but it's easy to extend 
  to make slight improvements for formats such as Markdown.
\end{enumerate}
\end{frame}

An advantage of using \LaTeX{} (or \TeX) for the documentation, over formats 
such as Markdown, is that it's a Turing complete language.
This allows us to do anything we want with the documentation to improve the 
exposition for the reader.
For instance, in my workflow (\cref{myflow}) I use Python\TeX{} 
(\texttt{pythontex}) to run the program and include outputs in the 
documentation.

\begin{frame}
\begin{figure}
  \includegraphics[width=0.8\columnwidth]{figs/pythontex.pdf}
  \caption{\label{myflow}%
    My workflow with \texttt{beamerarticle}, \texttt{beamer} and Python\TeX.%
  }
\end{figure}
\end{frame}

\begin{frame}[fragile]
\begin{example}[Python\TeX{}]
We saw in
\only<article>{\cref{foo.bar}}%
\only<presentation>{above}
that it's actually valid Python.
We can do this:
\begin{minted}{latex}
\begin{pyblock}
import subprocess
print(r"\begin{verbatim}")
proc = subprocess.run(["python3", "foo.bar"],
                      capture_output=True)
print(proc.stdout)
print(r"\end{verbatim}")
\end{pyblock}
\end{minted}
The results looks like this:
\begin{pycode}
import subprocess
print(r"\begin{verbatim}")
proc = subprocess.run(["python3", "foo.bar"],
                      capture_output=True)
print(proc.stdout)
print(r"\end{verbatim}")
\end{pycode}
\end{example}
\end{frame}

\begin{frame}
\begin{example}
You can find the source code for this
\only<presentation>{slides (and article)}%
\only<article>{article (and slides)}
at GitHub:
\begin{center}
\url{https://github.com/dbosk/literate-programming/tree/master/whatis}.
\end{center}
\end{example}
\end{frame}

\subsection{Example: a script for merging Canvas rooms}

\mode<all>{\input{merge.tex}}

All in all, the script [[merge.sh]] looks like this after we've tangled it:
\begin{frame}[fragile,allowframebreaks]
\only<presentation>{\inputminted[fontsize=\footnotesize]{bash}{merge.sh}}
\only<article>{\inputminted{bash}{merge.sh}}
\end{frame}

\subsection{Summary}

\ltnote{%
  This question is purely phenomenographic.
  We want to know how they perceive literate programming, what aspects they 
  distinguish now.
}%
\begin{frame}
\begin{activity}
  How would you summarize literate programming?
\end{activity}
\end{frame}

\subsection{Other tools}

We note that Haskell supports literate programming out of the box.
This is done by using a file with the extension [[.lhs]] instead of [[.hs]].
In a [[.lhs]] file, the code is written in code blocks:
\begin{frame}[fragile]
\begin{minted}{text}
Let's create a small Haskell program.
> main = putStrLn "Hello, world!"
\end{minted}
or, equivalently
\begin{minted}{text}
Let's create a small Haskell program.
\begin{code}
main = putStrLn "Hello, world!"
\end{code}
\end{minted}
\end{frame}

We note that the code blocks of literate Haskell doesn't allow for the same web 
of code blocks as \web{}-based literate programming.
This is actually fine due to the nature of Haskell, where the order of 
definitions doesn't matter.
This means that we can still, despite this, write the code in the order we want 
to explain it---adapted for human understanding, not the computer's.

Another related tool, Agda, allows for the same type of literate 
programming.
Agda uses the extension [[.lagda]].
Agda is a language for formal reasoning and proof development, developed by Ulf 
Norell and Catarina Coquand at Chalmers University of Technology.
(We note that several people from Chalmers also contributed to the development 
of Haskell.)

\begin{frame}<presentation>
\begin{center}
  \Huge
  Agda
\end{center}
\end{frame}

As a final note, GNU Make has built in rules for literate programming using 
Knuth's \cweb (what you see in \cref{web}), but not for \noweb.

\begin{frame}<presentation>
\begin{center}
  \Huge
  GNU Make
\end{center}
\end{frame}


\section{Famous literate programs}

The first program that comes to mind is of course
\begin{frame}%
\only<presentation>{\centering\Huge}%
\TeX\autocite{TeXprogram}
and
\LaTeX\footnote{\url{https://latex-project.org}}%
\end{frame}.
\TeX{} was of course among the first literate programs to be written.

\begin{frame}
  On 8th January 2014, Matt Pharr, Greg Humphreys, and Pat Hanrahan were 
  awarded the 2013 Scientific and Technical Academy Award for Physically Based 
  Rendering\autocite[][award for an earlier edition]{PBR}.
  \begin{onlyenv}<article>
    See \cref{fig:pbr}.
    The motivation:
    \blockquote{%
      Physically based rendering has transformed computer graphics lighting by 
      more accurately simulating materials and lights, allowing digital artists 
      to focus on cinematography rather than the intricacies of rendering. 
      First published in 2004, Physically Based Rendering is both a textbook 
      and a complete source-code implementation that has provided a widely 
      adopted practical roadmap for most physically based shading and lighting 
      systems used in film production.
    }
  \end{onlyenv}

  \begin{figure}
    \begin{subfigure}{0.48\columnwidth}
      \includegraphics[width=\columnwidth]{figs/pbrcover.jpg}
      \caption{The cover of the book \citetitle{PBR}.}
    \end{subfigure}
    \begin{subfigure}{0.48\columnwidth}
      \includegraphics[width=\columnwidth]{figs/pbr-authors-academy.jpg}
      \caption{\Citeauthor{PBR} at the Academy Awards ceremony.}
    \end{subfigure}
    \caption{\label{fig:pbr}The book \citetitle{PBR} and its authors.}
  \end{figure}
\end{frame}

Knuth said of this: \blockquote{This book has deservedly won an Academy Award. 
I believe it should also be nominated for a Pulitzer Prize.}
This book is a literate program.
See \cref{fig:pbrlit} for an excerpt from the book.

\begin{frame}
  \begin{figure}
    \centering
    \includegraphics[width=\columnwidth]{figs/pbr.png}
    \caption{\label{fig:pbrlit}%
      An excerpt from the book \citetitle{PBR} (online version).
    }
  \end{figure}
\end{frame}

\begin{onlyenv}<presentation>
\begin{frame}
  Whatever Daniel wrote during the last decade \dots
\end{frame}
\end{onlyenv}


\begin{frame}
\printbibliography{}
\end{frame}


\title{%
  What is literate programming?
}
\author{%
  Daniel Bosk
}
\institute{%
  KTH EECS
}

\mode*

@

\begin{frame}
  \maketitle
\end{frame}

\begin{abstract}
  \input{abstract.tex}
\end{abstract}

\clearpage

\begin{frame}
  \only<presentation>{\tableofcontents[hideallsubsections]}
  \only<article>{\tableofcontents}
\end{frame}

\clearpage

\section{Introduction}

Let's start of with some thinking.

\ltnote{%
  We want to investigate how many know of or have heard of literate 
  programming.
  Or, think they know.
  This will simply give us some statistics.
}%
\begin{frame}
\begin{activity}\label{HeardOfLP}
  Have you ever heard of or do you know literate programming?
\end{activity}
\end{frame}

\ltnote{%
  We want to investigate what people think literate programming is.
  This will help us understand the correctness of the answers of 
  \cref{HeardOfLP}.

  This will also help us understand how to improve this material in the future.

  Finally, consider the results by Székely discussed in Chapter 6 of 
  \cite{NecessaryConditionsOfLearning}.
  If they get to think a bit about what they think it is, they'll be more 
  likely to learn better.
}%
\begin{frame}
\begin{activity}
  What do you think it means?
\end{activity}
\end{frame}

Now that you have heard the term, you must learn what it means.
We'll see afterwards how you feel about it.
As Knuth says:
\begin{frame}
\blockcquote{Knuth1984}{%
  I must confess that there may also be a bit of malice in my choice of a 
  title. During the 1970s I was coerced like everybody else into adopting the 
  ideas of structured programming, because I couldn’t bear to be found guilty 
  of writing unstructured programs. Now I have a chance to get even. By coining 
  the phrase \enquote{literate programming,} I am imposing a moral commitment 
  on everyone who hears the term; surely nobody wants to admit writing an 
  illiterate program.%
}
\end{frame}

\subsection{Motivation}

Let's start with a quote that summarizes Knuth's motivation for literate 
programming:
\begin{frame}
\blockcquote[p.~99, my emphasis]{Knuth1984}{%
  Let us change our traditional attitude to the construction of programs: 
  Instead of imagining that our main task is to instruct a computer what to do, 
  let us concentrate rather on
  \textbf{explaining to human beings what we want a computer to do}.

  \textelp{}

  Such an author, with thesaurus in hand, chooses the names of variables 
  carefully and explains what each variable means. He or she
  \textbf{strives for a program that is comprehensible because its concepts 
  have been introduced in an order that is best for human understanding},
  using a mixture of formal and informal methods that reinforce each other.
}
\end{frame}
\mode<all>{%
\NewDocumentCommand{\LPexplain}{}{%
  explaining to human beings what we want a computer to do%
}
\NewDocumentCommand{\LPorder}{}{%
  strives for a program that is comprehensible because its concepts have been 
  introduced in an order that is best for human understanding%
}
\NewDocumentCommand{\LPgoals}{}{%
  \begin{itemize}
    \item \textbf{\LPexplain}
    \item \textbf{\LPorder}
  \end{itemize}
}}%
So we can summarize the goals of literate programming as follows:
\begin{itemize}
\item \LPexplain, and
\item \LPorder.
\end{itemize}

There are some more fun and interesting quotes in Knuth's paper.
The following are also worth mentioning:
\begin{frame}
\blockcquote{Knuth1984}{%
  I’ve stumbled across a method of composing programs that excites me
  very much. In fact, my enthusiasm is so great that I must warn the reader to 
  discount much of what I shall say as the ravings of a fanatic who thinks he 
  has just seen a great light.%
}
\end{frame}

But Knuth is convinced that this works well:
\blockcquote{Knuth1984}{%
  Because it seems to me that at last
  I’m able to write programs as they should be written.
  My programs are not only explained better than ever
  before; they also are better programs, because the new
  methodology encourages me to do a better job.%
}

\subsection{Related approaches}

Let's start by thinking of systems that we know that might fulfil some of these 
goals.
\ltnote{%
  The purpose of this is to get them to think about systems they already know 
  that might come close to this.
  From a variation theoretic perspective, they now think about why or why not 
  some things fulfil these goals.
  This means that they have already gotten started on the contrast pattern.
  Compare with the Japanese classrooms discussed in Chapter 6 of 
  \cite{NecessaryConditionsOfLearning}.

  However, we don't ask them to write anything at this point.
  To name them, they still have to think about this.
  Then we'll go through a few in detail.
  Then we can ask them for remaining ones.
}%
\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
Do you know of any tools/systems/languages that lets you do something like 
this?
Name them.
\end{activity}
\end{frame}

\paragraph{Notebooks}

Probably the first that comes to mind is the Jupyter notebook,
see \cref{fig:jupyter}.

\begin{frame}
\begin{activity}
How well do you know the concept of notebooks\footnote{%
  Be it Jupyter, Google Colab, or any other similar system.
}?
\end{activity}
\end{frame}

\begin{frame}
\begin{figure}
  \includegraphics[width=\columnwidth]{figs/jupyter-notebook.png}
  \caption{\label{fig:jupyter}%
    The Jupyter notebook.
  }
\end{figure}
\end{frame}

\begin{frame}
\begin{remark}
  The concept of notebooks seems to originate with 
  Mathematica\autocite{Wolfram1988}.
  (Wolfram started the work in 1986.)
\end{remark}
\end{frame}

\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
How well do you think notebooks fulfil the goals of literate programming?
\end{activity}
\end{frame}

It for sure fulfils the first goal, \enquote{\LPexplain}.
However, it doesn't necessarily fulfil the second goal, \enquote{\LPorder}.
We can't really have any order we want, we must follow the order of execution 
of the cells---which is ordered for the computer, not the human\footnote{%
  Although, these might align at times, at other times they don't.
}.

\begin{frame}<presentation>
\begin{block}{Notebooks}
  \begin{itemize}
    \item[\(+\)] {\color{green!75!black}\LPexplain}
    \item[\(\approx\)] {\color{orange}\LPorder}
  \end{itemize}
\end{block}
\end{frame}

\paragraph{Rubber duck debugging}

Another related concept is rubber duck debugging.

\begin{frame}
\begin{activity}
How well do you know rubber duck debugging?
\end{activity}
\end{frame}

\begin{frame}<presentation>
\begin{block}{Rubber duck debugging}
  \begin{itemize}
    \item Explain the code to a rubber duck.
    \item Helps understanding the code to find the bug.
  \end{itemize}
\end{block}
\end{frame}

The idea of rubber duck debugging is that you explain the code for a rubber 
duck.
In doing so, you get a better understanding of the code, which helps you to 
find the bug.

\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
How well do you think rubber duck debugging fulfils the goals of literate 
programming?
\end{activity}
\end{frame}

\begin{frame}<presentation>
\begin{uncoverenv}<1>
\begin{block}{Rubber duck debugging}
  \begin{itemize}
    \item[\(+\)] {\color{green!75!black}\LPexplain}
    \item[\(+\)] {\color{green!75!black}\LPorder}
  \end{itemize}
\end{block}
\end{uncoverenv}

\begin{onlyenv}<2>
\begin{remark}
  But none is documented, so it's lost to others.
\end{remark}

\begin{block}{Rubber duck debugging, end product}
  \begin{itemize}
    \item[\(-\)] {\color{red}\LPexplain}
    \item[\(-\)] {\color{red}\LPorder}
  \end{itemize}
\end{block}
\end{onlyenv}
\end{frame}

This for sure comes close to the goals of literate programming.
However, none is documented, so it's lost to others.
Also, the programmer is not forced to explain things unless there is a bug to 
find.

\paragraph{Pair programming}

Pair programming is similar to rubber duck debugging, but with another human 
instead of a rubber duck and you do this while developing---not just when 
debugging.

\begin{frame}<presentation>
\begin{uncoverenv}<1>
\begin{block}{Pair programming}
  \begin{itemize}
    \item[\(+\)] {\color{green!75!black}\LPexplain}
    \item[\(\approx\)] {\color{orange}\LPorder}
  \end{itemize}
\end{block}
\end{uncoverenv}

\begin{onlyenv}<2>
\begin{remark}
  But this is not necessarily documented, so it's lost to others.
\end{remark}

\begin{block}{Pair programming, end product}
  \begin{itemize}
    \item[\(-\)] {\color{red}\LPexplain}
    \item[\(-\)] {\color{red}\LPorder}
  \end{itemize}
\end{block}
\end{onlyenv}
\end{frame}

\paragraph{Documentation in version management}

\paragraph{Pseudocode}

\paragraph{Test-driven development}

\paragraph{Others}

This covered only some of the related concepts.

\ltnote{%
  We asked them in the beginning to name some systems that they think are 
  related.
  Some of their answers were probably covered by the examples above.
  In either case, they did their own analysis above, an analysis that might 
  have been complemented by the examples we gave.
  Now we give them the chance to provide us with the complemented analyses from 
  before, for the systems that we didn't cover.
}%
\begin{frame}
\only<presentation>{\LPgoals}
\begin{activity}
Do you know of any other tools/systems/languages/techniques that let you do 
something like this?
Name them and discuss how well they fulfil the goals.
\end{activity}
\end{frame}



\section{Literate programming}

\begin{frame}
\begin{figure}
\begin{fullwidth}
\begin{subfigure}{0.48\columnwidth}
  \includegraphics[width=\columnwidth]{figs/web.pdf}
  \caption{Traditional \web-based workflow.}
\end{subfigure}
\begin{subfigure}{0.48\columnwidth}
  \includegraphics[width=\columnwidth]{figs/noweb.pdf}
  \caption{\noweb-based workflow.}
\end{subfigure}
\end{fullwidth}
\caption{Traditional \web{} vs \noweb{} workflow.}
\end{figure}
\end{frame}

\begin{frame}
\begin{figure}
  \includegraphics[width=0.8\columnwidth]{figs/beamer.pdf}
  \caption{My workflow with \texttt{beamerarticle} and \texttt{beamer}.}
\end{figure}
\end{frame}

\subsection{Example: a script for merging Canvas rooms}

\mode<all>{\input{merge.tex}}

\subsection{Check}

\ltnote{%
  This question is purely phenomenographic.
  We want to know how they perceive literate programming, what aspects they 
  distinguish now.
}%
\begin{frame}
\begin{activity}
  How would you summarize literate programming?
\end{activity}
\end{frame}

\subsection{\noweb: a literate programming tool}

To use literate programming we need some tooling.
We'll use \noweb\autocite{Ramsey1994}, we'll get back to in shortly.

There has been several tools developed for literate programming over time.
The original was Knuth's \web\autocite{Knuth1984}, which required the programs 
to be written in Pascal and the documentation in \TeX.
This was later generalized to \cweb\autocite{CWEB}, which allowed the programs 
to be written in C and the documentation in \TeX.

\noweb, on the other hand, is language agnostic.
It allows the programmer to write the programs in any language and the 
documentation in any format.
This makes it simpler, hence \enquote{simplified} in the title of the paper by 
\textcite{Ramsey1994}.
This comes with both advantages and disadvantages.
The most obvious disadvantage is that we can't get prettyprinting (syntax 
highlighting) in any straight-forward way; the system can't know what language 
is being used.
Some advantages are that
\begin{enumerate}
  \item we can mix languages: for instance, we can write the make file in the 
  same file as the C program; that way we can include necessary building 
  instructions, for example, when we depend on certain libraries.
  \item we can also write the documentation in any format, for instance in 
  Markdown, \LaTeX, or HTML.
  \noweb{} supports \LaTeX{} and HTML out of the box, but it's easy to extend 
  to make slight improvements for formats such as Markdown.
\end{enumerate}


\section{Famous literate programs}

The first program that comes to mind is of course
\begin{frame}%
\only<presentation>{\centering\Huge}%
\TeX\autocite{TeXprogram}
and
\LaTeX\footnote{\url{https://latex-project.org}}%
\end{frame}.
\TeX{} was of course among the first literate programs to be written.

\begin{frame}
  On 8th January 2014, Matt Pharr, Greg Humphreys, and Pat Hanrahan were 
  awarded the 2013 Scientific and Technical Academy Award for Physically Based 
  Rendering\autocite[][award for an earlier edition]{PBR}.
  \begin{onlyenv}<article>
    See \cref{fig:pbr}.
    The motivation:
    \blockquote{%
      Physically based rendering has transformed computer graphics lighting by 
      more accurately simulating materials and lights, allowing digital artists 
      to focus on cinematography rather than the intricacies of rendering. 
      First published in 2004, Physically Based Rendering is both a textbook 
      and a complete source-code implementation that has provided a widely 
      adopted practical roadmap for most physically based shading and lighting 
      systems used in film production.
    }
  \end{onlyenv}

  \begin{figure}
    \begin{subfigure}{0.48\columnwidth}
      \includegraphics[width=\columnwidth]{figs/pbrcover.jpg}
      \caption{The cover of the book \citetitle{PBR}.}
    \end{subfigure}
    \begin{subfigure}{0.48\columnwidth}
      \includegraphics[width=\columnwidth]{figs/pbr-authors-academy.jpg}
      \caption{\Citeauthor{PBR} at the Academy Awards ceremony.}
    \end{subfigure}
    \caption{\label{fig:pbr}The book \citetitle{PBR} and its authors.}
  \end{figure}
\end{frame}

Knuth said of this: \blockquote{This book has deservedly won an Academy Award. 
I believe it should also be nominated for a Pulitzer Prize.}
This book is a literate program.
See \cref{fig:pbrlit} for an excerpt from the book.

\begin{frame}
  \begin{figure}
    \centering
    \includegraphics[width=\columnwidth]{figs/pbr.png}
    \caption{\label{fig:pbrlit}%
      An excerpt from the book \citetitle{PBR} (online version).
    }
  \end{figure}
\end{frame}

\begin{onlyenv}<presentation>
\begin{frame}
  Whatever Daniel wrote during the last decade \dots
\end{frame}
\end{onlyenv}


\begin{frame}
\printbibliography{}
\end{frame}


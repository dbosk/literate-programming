@book{NecessaryConditionsOfLearning,
	title = {Necessary Conditions of Learning},
	author = {Ference Marton},
	doi = {10.4324/9781315816876},
	isbn = {978-1317811947},
	month = {6},
	publisher = {Routledge},
  year = {2014},
}

@article{Knuth1984,
	title = {Literate Programming},
	author = {Knuth, Donald Ervin},
	doi = {10.1093/comjnl/27.2.97},
	issn = {0010-4620},
	journal = {Computer journal},
	month = {2},
	number = {2},
	pages = {97--111},
	publisher = {Oxford University Press (OUP)},
  volume = {27},
	year = {1984},
}

@book{PBR,
	title = {Physically Based Rendering: From Theory to Implementation},
	author = {Matt Pharr and Wenzel Jakob and Greg Humphreys},
	edition = {4},
	url = {https://pbr-book.org/},
	year = {2023},
}

@book{TeXprogram,
	title = {\TeX: the Program},
  author = {Knuth, Donald Ervin},
	month = {10},
	note = {Also available on CTAN},
	publisher = {Addison-Wesley},
	year = {1986},
}

@article{Ramsey1994,
	title = {Literate programming simplified},
	author = {Ramsey, Norman},
	doi = {10.1109/52.311070},
	issn = {0740-7459},
	journal = {IEEE Software},
	month = {9},
	number = {5},
	pages = {97--105},
	publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
  volume = {11},
	year = {1994},
}

@book{CWEB,
	title = {The CWEB System of Structured Documentation},
	author = {Knuth, Donald Ervin and Levy, Silvio},
	publisher = {Addison-Wesley Longman Publishing Co., Inc.},
	year = {1994},
}

@book{Wolfram1988,
	title = {Mathematica : a system for doing mathematics by computer},
	author = {Wolfram, Stephen},
	address = {Redwood City, Calif.},
	isbn = {0201193345},
	pages = {I--XVIII, 1--749},
	publisher = {Addison-Wesley},
	url = {https://catalog.lib.kyushu-u.ac.jp/en/recordID/1000260128},
	year = {1988},
}

@book{KnuthAOCPvol3,
	title = {The Art of Computer Programming: Sorting and Searching},
	author = {Knuth, Donald Ervin},
	edition = {2},
	isbn = {0-201-89685-0},
	publisher = {Addison-Wesley},
	volume = {3},
	year = {1998},
}

@article{Musser1997,
	title = {Introspective Sorting and Selection Algorithms},
	author = {Musser, David R.},
	abstract = {Abstract Quicksort is the preferred in-place sorting algorithm in 
many contexts, since its average computing time on uniformly 
distributed inputs is Θ(N log N), and it is in fact faster than 
most other sorting algorithms on most inputs. Its drawback is 
that its worst-case time bound is Θ(N2). Previous attempts to 
protect against the worst case by improving the way quicksort 
chooses pivot elements for partitioning have increased the 
average computing time too much – one might as well use heapsort, 
which has a Θ(N log N) worst-case time bound, but is on the 
average 2–5 times slower than quicksort. A similar dilemma exists 
with selection algorithms (for finding the i-th largest element) 
based on partitioning. This paper describes a simple solution to 
this dilemma: limit the depth of partitioning, and for 
subproblems that exceed the limit switch to another algorithm 
with a better worst-case bound. Using heapsort as the ‘stopper’ 
yields a sorting algorithm that is just as fast as quicksort in 
the average case, but also has an Θ(N log N) worst case time 
bound. For selection, a hybrid of Hoare's FIND algorithm, which 
is linear on average but quadratic in the worst case, and the 
Blum–Floyd–Pratt–Rivest–Tarjan algorithm is as fast as Hoare's 
algorithm in practice, yet has a linear worst-case time bound. 
Also discussed are issues of implementing the new algorithms as 
generic algorithms, and accurately measuring their performance in 
the framework of the C+:+ Standard Template Library. ©1997 by 
John Wiley \& Sons, Ltd.},
	doi = {https://doi.org/10.1002/(SICI)1097-024X(199708)27:8<983::AID-SPE117>3.0.CO;2-\#},
	issn = {0038-0644},
	journal = {Software: Practice and Experience},
	keywords = {quicksort, heapsort, sorting algorithms, introspective 
algorithms, hybrid algorithms, generic algorithms, STL},
	month = {8},
	number = {8},
	pages = {983-993},
	publisher = {Wiley},
	volume = {27},
	year = {1997},
}

@book{ProgrammingPearls,
	title = {Programming Pearls},
	author = {Jon Bentley},
	booktitle = {CACM},
	doi = {10.1145/32232.315727},
	publisher = {Addison-Wesley},
	url = {https://dl.acm.org/doi/pdf/10.1145/32232.315727},
	year = {1999},
}

@article{ErrorsOfTeX,
  title = {The Errors of \TeX},
	author = {Knuth, Donald Ervin},
  year = {1989},
  issue_date = {July 1989},
  publisher = {John Wiley \& Sons, Inc.},
  address = {USA},
  volume = {19},
  number = {7},
  issn = {0038-0644},
  doi = {10.1002/spe.4380190702},
  journal = {Softw. Pract. Exper.},
  month = {7},
  pages = {607–685},
  numpages = {79}
}

@book{CleanCode,
  title = {Clean Code: A Handbook of Agile Software Craftsmanship},
  author = {Robert C. Martin},
  publisher = {Prentice Hall},
  year = {2008},
}

@book{CodeComplete,
  title={Code complete},
  author={McConnell, Steve},
  year={2004},
  publisher={Pearson Education},
}

@manual{GNUMake,
  title = {GNU Make Manual},
  author = {{GNU Project}},
  organization = {Free Software Foundation},
  year = {2023},
  month = {2},
  URL={https://www.gnu.org/software/make/manual/},
}

@manual{makefiles,
  title = {Make-ing Life Easy: A General Makefile Framework},
  author = {Bosk, Daniel},
  year = {2024},
  month = {7},
  URL={https://github.com/dbosk/makefiles/},
}

@manual{weblogin,
  title = {{\texttt{weblogin}}: Automates logging into UIs to access unofficial 
           APIs},
  author = {Bosk, Daniel},
  year = {2024},
  month = {2},
  note = {Version 1.8},
  URL={https://github.com/dbosk/weblogin/releases/tag/v1.8},
}

@online{GoogleTestPrimer,
  title = {GoogleTest Primer},
  author = {{Google Inc.}},
  year = {2024},
  month = {10},
  URL={https://google.github.io/googletest/primer.html},
}

@manual{didactic,
  title = {didactic---Tools for writing teaching material},
  author = {Bosk, Daniel},
  year = {2024},
  month = {10},
  URL={https://github.com/dbosk/didactic},
  note={CTAN \url{https://ctan.org/pkg/didactic}},
}
